"use strict";(globalThis.webpackChunkgo_faster_docs=globalThis.webpackChunkgo_faster_docs||[]).push([[8],{5680:(e,t,n)=>{n.d(t,{xA:()=>g,yg:()=>d});var r=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},g=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,y=u["".concat(i,".").concat(d)]||u[d]||c[d]||a;return n?r.createElement(y,s(s({ref:t},g),{},{components:n})):r.createElement(y,s({ref:t},g))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7670:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(8168),o=(n(6540),n(5680));const a={id:"patterns",title:"Patterns",sidebar_position:5},s=void 0,l={unversionedId:"style-guide/patterns",id:"style-guide/patterns",title:"Patterns",description:"Test Tables",source:"@site/docs/style-guide/patterns.mdx",sourceDirName:"style-guide",slug:"/style-guide/patterns",permalink:"/docs/style-guide/patterns",draft:!1,editUrl:"https://github.com/go-faster/web/edit/main/docs/style-guide/patterns.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"patterns",title:"Patterns",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Style",permalink:"/docs/style-guide/style"},next:{title:"Telegram Group",permalink:"/docs/telegram"}},i={},p=[{value:"Test Tables",id:"test-tables",level:2},{value:"Functional Options",id:"functional-options",level:2}],g={toc:p};function c(e){let{components:t,...n}=e;return(0,o.yg)("wrapper",(0,r.A)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h2",{id:"test-tables"},"Test Tables"),(0,o.yg)("p",null,"Use table-driven tests with ",(0,o.yg)("a",{parentName:"p",href:"https://blog.golang.org/subtests"},"subtests")," to avoid duplicating code when the core\ntest logic is repetitive."),(0,o.yg)("table",null,(0,o.yg)("thead",null,(0,o.yg)("tr",null,(0,o.yg)("th",null,"Bad"),(0,o.yg)("th",null,"Good"))),(0,o.yg)("tbody",null,(0,o.yg)("tr",null,(0,o.yg)("td",null,(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-go"},'// func TestSplitHostPort(t *testing.T)\n\nhost, port, err := net.SplitHostPort("192.0.2.0:8000")\nrequire.NoError(t, err)\nassert.Equal(t, "192.0.2.0", host)\nassert.Equal(t, "8000", port)\n\nhost, port, err = net.SplitHostPort("192.0.2.0:http")\nrequire.NoError(t, err)\nassert.Equal(t, "192.0.2.0", host)\nassert.Equal(t, "http", port)\n\nhost, port, err = net.SplitHostPort(":8000")\nrequire.NoError(t, err)\nassert.Equal(t, "", host)\nassert.Equal(t, "8000", port)\n\nhost, port, err = net.SplitHostPort("1:8")\nrequire.NoError(t, err)\nassert.Equal(t, "1", host)\nassert.Equal(t, "8", port)\n'))),(0,o.yg)("td",null,(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-go"},'// func TestSplitHostPort(t *testing.T)\n\ntests := []struct{\n  give     string\n  wantHost string\n  wantPort string\n}{\n  {\n    give:     "192.0.2.0:8000",\n    wantHost: "192.0.2.0",\n    wantPort: "8000",\n  },\n  {\n    give:     "192.0.2.0:http",\n    wantHost: "192.0.2.0",\n    wantPort: "http",\n  },\n  {\n    give:     ":8000",\n    wantHost: "",\n    wantPort: "8000",\n  },\n  {\n    give:     "1:8",\n    wantHost: "1",\n    wantPort: "8",\n  },\n}\n\nfor _, tt := range tests {\n  t.Run(tt.give, func(t *testing.T) {\n    host, port, err := net.SplitHostPort(tt.give)\n    require.NoError(t, err)\n    assert.Equal(t, tt.wantHost, host)\n    assert.Equal(t, tt.wantPort, port)\n  })\n}\n')))))),(0,o.yg)("p",null,"Test tables make it easier to add context to error messages, reduce duplicate\nlogic, and add new test cases."),(0,o.yg)("p",null,"We follow the convention that the slice of structs is referred to as ",(0,o.yg)("inlineCode",{parentName:"p"},"tests"),"\nand each test case ",(0,o.yg)("inlineCode",{parentName:"p"},"tt"),". Further, we encourage explicating the input and output\nvalues for each test case with ",(0,o.yg)("inlineCode",{parentName:"p"},"give")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"want")," prefixes."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-go"},"tests := []struct{\n  give     string\n  wantHost string\n  wantPort string\n}{\n  // ...\n}\n\nfor _, tt := range tests {\n  // ...\n}\n")),(0,o.yg)("h2",{id:"functional-options"},"Functional Options"),(0,o.yg)("p",null,"Functional options is a pattern in which you declare an opaque ",(0,o.yg)("inlineCode",{parentName:"p"},"Option")," type\nthat records information in some internal struct. You accept a variadic number\nof these options and act upon the full information recorded by the options on\nthe internal struct."),(0,o.yg)("p",null,"Use this pattern for optional arguments in constructors and other public APIs\nthat you foresee needing to expand, especially if you already have three or\nmore arguments on those functions."),(0,o.yg)("table",null,(0,o.yg)("thead",null,(0,o.yg)("tr",null,(0,o.yg)("th",null,"Bad"),(0,o.yg)("th",null,"Good"))),(0,o.yg)("tbody",null,(0,o.yg)("tr",null,(0,o.yg)("td",null,(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-go"},"// package db\n\nfunc Open(\n  addr string,\n  cache bool,\n  logger *zap.Logger\n) (*Connection, error) {\n  // ...\n}\n"))),(0,o.yg)("td",null,(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-go"},"// package db\n\ntype Option interface {\n  // ...\n}\n\nfunc WithCache(c bool) Option {\n  // ...\n}\n\nfunc WithLogger(log *zap.Logger) Option {\n  // ...\n}\n\n// Open creates a connection.\nfunc Open(\n  addr string,\n  opts ...Option,\n) (*Connection, error) {\n  // ...\n}\n")))),(0,o.yg)("tr",null,(0,o.yg)("td",null,(0,o.yg)("p",null,"The cache and logger parameters must always be provided, even if the user\nwants to use the default."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-go"},"db.Open(addr, db.DefaultCache, zap.NewNop())\ndb.Open(addr, db.DefaultCache, log)\ndb.Open(addr, false /* cache */, zap.NewNop())\ndb.Open(addr, false /* cache */, log)\n"))),(0,o.yg)("td",null,(0,o.yg)("p",null,"Options are provided only if needed."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-go"},"db.Open(addr)\ndb.Open(addr, db.WithLogger(log))\ndb.Open(addr, db.WithCache(false))\ndb.Open(\n  addr,\n  db.WithCache(false),\n  db.WithLogger(log),\n)\n")))))),(0,o.yg)("p",null,"Our suggested way of implementing this pattern is with an ",(0,o.yg)("inlineCode",{parentName:"p"},"Option")," interface\nthat holds an unexported method, recording options on an unexported ",(0,o.yg)("inlineCode",{parentName:"p"},"options"),"\nstruct."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-go"},"type options struct {\n  cache  bool\n  logger *zap.Logger\n}\n\ntype Option interface {\n  apply(*options)\n}\n\ntype cacheOption bool\n\nfunc (c cacheOption) apply(opts *options) {\n  opts.cache = bool(c)\n}\n\nfunc WithCache(c bool) Option {\n  return cacheOption(c)\n}\n\ntype loggerOption struct {\n  Log *zap.Logger\n}\n\nfunc (l loggerOption) apply(opts *options) {\n  opts.logger = l.Log\n}\n\nfunc WithLogger(log *zap.Logger) Option {\n  return loggerOption{Log: log}\n}\n\n// Open creates a connection.\nfunc Open(\n  addr string,\n  opts ...Option,\n) (*Connection, error) {\n  options := options{\n    cache:  defaultCache,\n    logger: zap.NewNop(),\n  }\n\n  for _, o := range opts {\n    o.apply(&options)\n  }\n\n  // ...\n}\n")),(0,o.yg)("p",null,"Note that there's a method of implementing this pattern with closures but we\nbelieve that the pattern above provides more flexibility for authors and is\neasier to debug and test for users. In particular, it allows options to be\ncompared against each other in tests and mocks, versus closures where this is\nimpossible. Further, it lets options implement other interfaces, including\n",(0,o.yg)("inlineCode",{parentName:"p"},"fmt.Stringer")," which allows for user-readable string representations of the\noptions."),(0,o.yg)("p",null,"See also,"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("a",{parentName:"p",href:"https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html"},"Self-referential functions and the design of options"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("a",{parentName:"p",href:"https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis"},"Functional options for friendly APIs")))))}c.isMDXComponent=!0}}]);