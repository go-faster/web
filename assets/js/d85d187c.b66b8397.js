"use strict";(globalThis.webpackChunkgo_faster_docs=globalThis.webpackChunkgo_faster_docs||[]).push([[496],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(t),m=l,k=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return t?a.createElement(k,r(r({ref:n},u),{},{components:t})):a.createElement(k,r({ref:n},u))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,r=new Array(i);r[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var p=2;p<i;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5963:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=t(3117),l=(t(7294),t(3905));const i={sidebar_position:6,id:"columns",title:"Column types"},r=void 0,o={unversionedId:"clickhouse/columns",id:"clickhouse/columns",title:"Column types",description:"See Data Types for general reference.",source:"@site/docs/clickhouse/columns.mdx",sourceDirName:"clickhouse",slug:"/clickhouse/columns",permalink:"/docs/clickhouse/columns",draft:!1,editUrl:"https://github.com/go-faster/web/edit/main/docs/clickhouse/columns.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,id:"columns",title:"Column types"},sidebar:"tutorialSidebar",previous:{title:"Server packets",permalink:"/docs/clickhouse/server"},next:{title:"Compression",permalink:"/docs/clickhouse/compression"}},s={},p=[{value:"Numeric types",id:"numeric-types",level:2},{value:"Integers",id:"integers",level:3},{value:"Floats",id:"floats",level:3},{value:"String",id:"string",level:2},{value:"FixedString(N)",id:"fixedstringn",level:2},{value:"IP",id:"ip",level:2},{value:"Tuple",id:"tuple",level:2},{value:"Map",id:"map",level:2},{value:"Array",id:"array",level:2},{value:"Nullable",id:"nullable",level:2},{value:"UUID",id:"uuid",level:2},{value:"Enum",id:"enum",level:2},{value:"Low Cardinality",id:"low-cardinality",level:2},{value:"Bool",id:"bool",level:2}],u={toc:p};function c(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/data-types/"},"Data Types")," for general reference."),(0,l.kt)("h2",{id:"numeric-types"},"Numeric types"),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Numeric types encoding matches memory layout of little endian cpus like AMD64 or ARM64."),(0,l.kt)("p",{parentName:"div"},"This allows to implement very efficient encoding and decoding."))),(0,l.kt)("h3",{id:"integers"},"Integers"),(0,l.kt)("p",null,"String of Int and UInt of 8, 16, 32, 64, 128 or 256 bits, in little endian."),(0,l.kt)("h3",{id:"floats"},"Floats"),(0,l.kt)("p",null,"Float32 and Float64 in IEEE 754 binary representation."),(0,l.kt)("h2",{id:"string"},"String"),(0,l.kt)("p",null,"Just an array of String, i.e. (len, value)."),(0,l.kt)("h2",{id:"fixedstringn"},"FixedString(N)"),(0,l.kt)("p",null,"An array of N-byte sequences."),(0,l.kt)("h2",{id:"ip"},"IP"),(0,l.kt)("p",null,"IPv4 is alias of ",(0,l.kt)("inlineCode",{parentName:"p"},"UInt32")," numeric type and represented as UInt32."),(0,l.kt)("p",null,"IPv6 is alias of ",(0,l.kt)("inlineCode",{parentName:"p"},"FixedString(16)")," and represented as binary directly."),(0,l.kt)("h2",{id:"tuple"},"Tuple"),(0,l.kt)("p",null,"Tuple is just an array of columns. For example, Tuple(String, UInt8) is just two columns\nencoded continuously."),(0,l.kt)("h2",{id:"map"},"Map"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Map(K, V)")," consists of three columns: ",(0,l.kt)("inlineCode",{parentName:"p"},"Offsets ColUInt64, Keys K, Values V"),"."),(0,l.kt)("p",null,"Rows count in ",(0,l.kt)("inlineCode",{parentName:"p"},"Keys")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Values")," column is last value from ",(0,l.kt)("inlineCode",{parentName:"p"},"Offsets"),"."),(0,l.kt)("h2",{id:"array"},"Array"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Array(T)")," consists of two columns: ",(0,l.kt)("inlineCode",{parentName:"p"},"Offsets ColUInt64, Data T"),"."),(0,l.kt)("p",null,"Rows count in ",(0,l.kt)("inlineCode",{parentName:"p"},"Data")," is last value from ",(0,l.kt)("inlineCode",{parentName:"p"},"Offsets"),"."),(0,l.kt)("h2",{id:"nullable"},"Nullable"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Nullable(T)")," consists of ",(0,l.kt)("inlineCode",{parentName:"p"},"Nulls ColUInt8, Values T")," with same rows count."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'// Nulls is nullable "mask" on Values column.\n// For example, to encode [null, "", "hello", null, "world"]\n//  Values: ["", "", "hello", "", "world"] (len: 5)\n//  Nulls:  [ 1,  0,       0,  1,       0] (len: 5)\n')),(0,l.kt)("h2",{id:"uuid"},"UUID"),(0,l.kt)("p",null,"Alias of ",(0,l.kt)("inlineCode",{parentName:"p"},"FixedString(16)"),", UUID value represented as binary."),(0,l.kt)("h2",{id:"enum"},"Enum"),(0,l.kt)("p",null,"Alias of ",(0,l.kt)("inlineCode",{parentName:"p"},"Int8")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"Int16"),", but each integer is mapped to some ",(0,l.kt)("inlineCode",{parentName:"p"},"String")," value."),(0,l.kt)("h2",{id:"low-cardinality"},"Low Cardinality"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"LowCardinality(T)")," consists of ",(0,l.kt)("inlineCode",{parentName:"p"},"Index T, Keys K"),",\nwhere ",(0,l.kt)("inlineCode",{parentName:"p"},"K")," is one of (UInt8, UInt16, UInt32, UInt64) depending on size of ",(0,l.kt)("inlineCode",{parentName:"p"},"Index"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'// Index (i.e. dictionary) column contains unique values, Keys column contains\n// sequence of indexes in Index column that represent actual values.\n//\n// For example, ["Eko", "Eko", "Amadela", "Amadela", "Amadela", "Amadela"] can\n// be encoded as:\n//  Index: ["Eko", "Amadela"] (String)\n//  Keys:  [0, 0, 1, 1, 1, 1] (UInt8)\n//\n// The CardinalityKey is chosen depending on Index size, i.e. maximum value\n// of chosen type should be able to represent any index of Index element.\n')),(0,l.kt)("h2",{id:"bool"},"Bool"),(0,l.kt)("p",null,"Alias of ",(0,l.kt)("inlineCode",{parentName:"p"},"UInt8"),", where ",(0,l.kt)("inlineCode",{parentName:"p"},"0")," is false and ",(0,l.kt)("inlineCode",{parentName:"p"},"1")," is true."))}c.isMDXComponent=!0}}]);