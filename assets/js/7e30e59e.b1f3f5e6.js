"use strict";(globalThis.webpackChunkgo_faster_docs=globalThis.webpackChunkgo_faster_docs||[]).push([[774],{4153:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>g,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var a=t(8168),r=(t(6540),t(5680));const l={id:"performance",title:"Performance",sidebar_position:3},i=void 0,o={unversionedId:"style-guide/performance",id:"style-guide/performance",title:"Performance",description:"Performance-specific guidelines apply only to the hot path.",source:"@site/docs/style-guide/performance.mdx",sourceDirName:"style-guide",slug:"/style-guide/performance",permalink:"/docs/style-guide/performance",draft:!1,editUrl:"https://github.com/go-faster/web/edit/main/docs/style-guide/performance.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"performance",title:"Performance",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Guidelines",permalink:"/docs/style-guide/guidelines"},next:{title:"Style",permalink:"/docs/style-guide/style"}},p={},c=[{value:"Prefer strconv over fmt",id:"prefer-strconv-over-fmt",level:2},{value:"Avoid string-to-byte conversion",id:"avoid-string-to-byte-conversion",level:2},{value:"Prefer Specifying Container Capacity",id:"prefer-specifying-container-capacity",level:2},{value:"Specifying Map Capacity Hints",id:"specifying-map-capacity-hints",level:3},{value:"Specifying Slice Capacity",id:"specifying-slice-capacity",level:3}],s={toc:c};function g(e){let{components:n,...t}=e;return(0,r.yg)("wrapper",(0,a.A)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Performance-specific guidelines apply only to the hot path."),(0,r.yg)("h2",{id:"prefer-strconv-over-fmt"},"Prefer strconv over fmt"),(0,r.yg)("p",null,"When converting primitives to/from strings, ",(0,r.yg)("inlineCode",{parentName:"p"},"strconv")," is faster than\n",(0,r.yg)("inlineCode",{parentName:"p"},"fmt"),"."),(0,r.yg)("table",null,(0,r.yg)("thead",null,(0,r.yg)("tr",null,(0,r.yg)("th",null,"Bad"),(0,r.yg)("th",null,"Good"))),(0,r.yg)("tbody",null,(0,r.yg)("tr",null,(0,r.yg)("td",null,(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},"for i := 0; i < b.N; i++ {\n  s := fmt.Sprint(rand.Int())\n}\n"))),(0,r.yg)("td",null,(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},"for i := 0; i < b.N; i++ {\n  s := strconv.Itoa(rand.Int())\n}\n")))),(0,r.yg)("tr",null,(0,r.yg)("td",null,(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"BenchmarkFmtSprint-4    143 ns/op    2 allocs/op\n"))),(0,r.yg)("td",null,(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"BenchmarkStrconv-4    64.2 ns/op    1 allocs/op\n")))))),(0,r.yg)("h2",{id:"avoid-string-to-byte-conversion"},"Avoid string-to-byte conversion"),(0,r.yg)("p",null,"Do not create byte slices from a fixed string repeatedly. Instead, perform the\nconversion once and capture the result."),(0,r.yg)("table",null,(0,r.yg)("thead",null,(0,r.yg)("tr",null,(0,r.yg)("th",null,"Bad"),(0,r.yg)("th",null,"Good"))),(0,r.yg)("tbody",null,(0,r.yg)("tr",null,(0,r.yg)("td",null,(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},'for i := 0; i < b.N; i++ {\n  w.Write([]byte("Hello world"))\n}\n'))),(0,r.yg)("td",null,(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},'data := []byte("Hello world")\nfor i := 0; i < b.N; i++ {\n  w.Write(data)\n}\n')))),(0,r.yg)("tr",null,(0,r.yg)("td",null,(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"BenchmarkBad-4   50000000   22.2 ns/op\n"))),(0,r.yg)("td",null,(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"BenchmarkGood-4  500000000   3.25 ns/op\n")))))),(0,r.yg)("h2",{id:"prefer-specifying-container-capacity"},"Prefer Specifying Container Capacity"),(0,r.yg)("p",null,"Specify container capacity where possible in order to allocate memory for the\ncontainer up front. This minimizes subsequent allocations (by copying and\nresizing of the container) as elements are added."),(0,r.yg)("h3",{id:"specifying-map-capacity-hints"},"Specifying Map Capacity Hints"),(0,r.yg)("p",null,"Where possible, provide capacity hints when initializing\nmaps with ",(0,r.yg)("inlineCode",{parentName:"p"},"make()"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},"make(map[T1]T2, hint)\n")),(0,r.yg)("p",null,"Providing a capacity hint to ",(0,r.yg)("inlineCode",{parentName:"p"},"make()")," tries to right-size the\nmap at initialization time, which reduces the need for growing\nthe map and allocations as elements are added to the map."),(0,r.yg)("p",null,"Note that, unlike slices, map capacity hints do not guarantee complete,\npreemptive allocation, but are used to approximate the number of hashmap buckets\nrequired. Consequently, allocations may still occur when adding elements to the\nmap, even up to the specified capacity."),(0,r.yg)("table",null,(0,r.yg)("thead",null,(0,r.yg)("tr",null,(0,r.yg)("th",null,"Bad"),(0,r.yg)("th",null,"Good"))),(0,r.yg)("tbody",null,(0,r.yg)("tr",null,(0,r.yg)("td",null,(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},'m := make(map[string]os.FileInfo)\n\nfiles, _ := ioutil.ReadDir("./files")\nfor _, f := range files {\n    m[f.Name()] = f\n}\n'))),(0,r.yg)("td",null,(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},'\nfiles, _ := ioutil.ReadDir("./files")\n\nm := make(map[string]os.FileInfo, len(files))\nfor _, f := range files {\n    m[f.Name()] = f\n}\n')))),(0,r.yg)("tr",null,(0,r.yg)("td",null,(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"m")," is created without a size hint; there may be more\nallocations at assignment time.")),(0,r.yg)("td",null,(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"m")," is created with a size hint; there may be fewer\nallocations at assignment time."))))),(0,r.yg)("h3",{id:"specifying-slice-capacity"},"Specifying Slice Capacity"),(0,r.yg)("p",null,"Where possible, provide capacity hints when initializing slices with ",(0,r.yg)("inlineCode",{parentName:"p"},"make()"),",\nparticularly when appending."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},"make([]T, length, capacity)\n")),(0,r.yg)("p",null,"Unlike maps, slice capacity is not a hint: the compiler will allocate enough\nmemory for the capacity of the slice as provided to ",(0,r.yg)("inlineCode",{parentName:"p"},"make()"),", which means that\nsubsequent ",(0,r.yg)("inlineCode",{parentName:"p"},"append()")," operations will incur zero allocations (until the length\nof the slice matches the capacity, after which any appends will require a resize\nto hold additional elements)."),(0,r.yg)("table",null,(0,r.yg)("thead",null,(0,r.yg)("tr",null,(0,r.yg)("th",null,"Bad"),(0,r.yg)("th",null,"Good"))),(0,r.yg)("tbody",null,(0,r.yg)("tr",null,(0,r.yg)("td",null,(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},"for n := 0; n < b.N; n++ {\n  data := make([]int, 0)\n  for k := 0; k < size; k++{\n    data = append(data, k)\n  }\n}\n"))),(0,r.yg)("td",null,(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},"for n := 0; n < b.N; n++ {\n  data := make([]int, 0, size)\n  for k := 0; k < size; k++{\n    data = append(data, k)\n  }\n}\n")))),(0,r.yg)("tr",null,(0,r.yg)("td",null,(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"BenchmarkBad-4    100000000    2.48s\n"))),(0,r.yg)("td",null,(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"BenchmarkGood-4   100000000    0.21s\n")))))))}g.isMDXComponent=!0},5680:(e,n,t)=>{t.d(n,{xA:()=>s,yg:()=>u});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),c=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return a.createElement(p.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),y=c(t),u=r,d=y["".concat(p,".").concat(u)]||y[u]||g[u]||l;return t?a.createElement(d,i(i({ref:n},s),{},{components:t})):a.createElement(d,i({ref:n},s))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=y;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"}}]);