"use strict";(globalThis.webpackChunkgo_faster_docs=globalThis.webpackChunkgo_faster_docs||[]).push([[109],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,k=u["".concat(l,".").concat(m)]||u[m]||h[m]||o;return n?a.createElement(k,i(i({ref:t},p),{},{components:n})):a.createElement(k,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9770:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:2,id:"hash",title:"CityHash"},i=void 0,s={unversionedId:"clickhouse/hash",id:"clickhouse/hash",title:"CityHash",description:"Prefer xxhash as non-cryptographic hash algorithm.",source:"@site/docs/clickhouse/hash.mdx",sourceDirName:"clickhouse",slug:"/clickhouse/hash",permalink:"/docs/clickhouse/hash",draft:!1,editUrl:"https://github.com/go-faster/web/edit/main/docs/clickhouse/hash.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"hash",title:"CityHash"},sidebar:"tutorialSidebar",previous:{title:"Intro",permalink:"/docs/clickhouse"},next:{title:"Wire protocol",permalink:"/docs/clickhouse/wire"}},l={},c=[{value:"Examples",id:"examples",level:2},{value:"Benchmarks",id:"benchmarks",level:2}],p={toc:c};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Prefer ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cespare/xxhash"},"xxhash")," as non-cryptographic hash algorithm.")),(0,r.kt)("p",null,"ClickHouse uses ",(0,r.kt)("strong",{parentName:"p"},"one of previous")," versions of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/google/cityhash"},"CityHash from Google"),"."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"CityHash has changed the algorithm after we have added it into ClickHouse."),(0,r.kt)("p",{parentName:"admonition"},"CityHash documentation specifically notes that the user should not rely to specific hash values and should not save it anywhere or use it as sharding key."),(0,r.kt)("p",{parentName:"admonition"},"But as we exposed this function to the user, we had to fix the version of CityHash (to 1.0.2). And now we guarantee that the behaviour of CityHash functions available in SQL will not change."),(0,r.kt)("p",{parentName:"admonition"},"\u2014 Alexey Milovidov, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/ClickHouse/issues/8354#issuecomment-568517969"},"comment")," on issue.")),(0,r.kt)("admonition",{title:"Note",type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"Current version of Google's CityHash ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/ClickHouse/issues/8354"},"differs")," from ClickHouse ",(0,r.kt)("inlineCode",{parentName:"p"},"cityHash64")," variant."),(0,r.kt)("p",{parentName:"admonition"},"Don't use ",(0,r.kt)("inlineCode",{parentName:"p"},"farmHash64")," to get Google's CityHash value! ",(0,r.kt)("a",{parentName:"p",href:"https://opensource.googleblog.com/2014/03/introducing-farmhash.html"},"FarmHash")," is a successor to CityHash, but they are not fully compatible."),(0,r.kt)("table",{parentName:"admonition"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"String"),(0,r.kt)("th",{parentName:"tr",align:null},"ClickHouse64"),(0,r.kt)("th",{parentName:"tr",align:null},"CityHash64"),(0,r.kt)("th",{parentName:"tr",align:null},"FarmHash64"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Moscow")),(0,r.kt)("td",{parentName:"tr",align:null},"12507901496292878638"),(0,r.kt)("td",{parentName:"tr",align:null},"5992710078453357409"),(0,r.kt)("td",{parentName:"tr",align:null},"5992710078453357409")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"How can you write a big system without C++?  -Paul Glick")),(0,r.kt)("td",{parentName:"tr",align:null},"6237945311650045625"),(0,r.kt)("td",{parentName:"tr",align:null},"749291162957442504"),(0,r.kt)("td",{parentName:"tr",align:null},"11716470977470720228"))))),(0,r.kt)("p",null,"You can use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/go-faster/city"},"go-faster/city")," Go package that implements both variants."),(0,r.kt)("p",null,"Also see ",(0,r.kt)("a",{parentName:"p",href:"https://opensource.googleblog.com/2011/04/introducing-cityhash.html"},"Introducing CityHash")," for description and\nreasoning behind creation. TL;DR ",(0,r.kt)("strong",{parentName:"p"},"non-cryptographic")," hash that is faster than ",(0,r.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/MurmurHash"},"MurmurHash"),", but more complex."),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,"Let's take 64-bit hash from ",(0,r.kt)("inlineCode",{parentName:"p"},"Moscow")," string."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},":) SELECT cityHash64('Moscow')\n12507901496292878638\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'s := []byte("Moscow")\nfmt.Print("ClickHouse: ")\nfmt.Println(city.CH64(s))\nfmt.Print("CityHash:   ")\nfmt.Println(city.Hash64(s))\n// Output:\n// ClickHouse: 12507901496292878638\n// CityHash:   5992710078453357409\n')),(0,r.kt)("p",null,"You can use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/go-faster/city/blob/main/_testdata/data.json"},"test data corpus")," to check your implementation of ClickHouse CityHash variant if needed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "Seed": {\n    "Low": 5577006791947779410,\n    "High": 8674665223082153551\n  },\n  "entries": [\n    {\n      "Input": "Moscow",\n      "City32": 431367057,\n      "City64": 5992710078453357409,\n      "City128": {\n        "Low": 10019773792274861915,\n        "High": 12276543986707912152\n      },\n      "City128Seed": {\n        "Low": 13396466470330251720,\n        "High": 5508504338941663328\n      },\n      "ClickHouse64": 12507901496292878638,\n      "ClickHouse128": {\n        "Low": 3377444358654451565,\n        "High": 2499202049363713365\n      },\n      "ClickHouse128Seed": {\n        "Low": 568168482305327346,\n        "High": 1719721512326527886\n      }\n    }\n  ]\n}\n')),(0,r.kt)("h2",{id:"benchmarks"},"Benchmarks"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"goos: linux\ngoarch: amd64\npkg: github.com/go-faster/city\ncpu: AMD Ryzen 9 5950X 16-Core Processor\nBenchmarkClickHouse128/16     2213.98 MB/s\nBenchmarkClickHouse128/64     4712.24 MB/s\nBenchmarkClickHouse128/256    7561.58 MB/s\nBenchmarkClickHouse128/1024  10158.98 MB/s\nBenchmarkClickHouse64        10379.89 MB/s\nBenchmarkCityHash32           3140.54 MB/s\nBenchmarkCityHash64           9508.45 MB/s\nBenchmarkCityHash128          9304.27 MB/s\nBenchmarkCityHash64Small      2700.84 MB/s\nBenchmarkCityHash128Small     1175.65 MB/s\n")))}h.isMDXComponent=!0}}]);