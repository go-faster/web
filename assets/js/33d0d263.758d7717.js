"use strict";(globalThis.webpackChunkgo_faster_docs=globalThis.webpackChunkgo_faster_docs||[]).push([[561],{3905:(t,e,a)=>{a.d(e,{Zo:()=>d,kt:()=>u});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function o(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var s=n.createContext({}),p=function(t){var e=n.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):o(o({},e),t)),a},d=function(t){var e=p(t.components);return n.createElement(s.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},c=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,s=t.parentName,d=i(t,["components","mdxType","originalType","parentName"]),c=p(a),u=r,k=c["".concat(s,".").concat(u)]||c[u]||m[u]||l;return a?n.createElement(k,o(o({ref:e},d),{},{components:a})):n.createElement(k,o({ref:e},d))}));function u(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,o=new Array(l);o[0]=c;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i.mdxType="string"==typeof t?t:r,o[1]=i;for(var p=2;p<l;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},2431:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>c,contentTitle:()=>d,default:()=>g,frontMatter:()=>p,metadata:()=>m,toc:()=>u});var n=a(7462),r=a(7294),l=a(3905),o=a(4996);const i="diagram_j5_G",s=t=>{let{src:e,alt:a="diagram",height:n,width:l}=t;return r.createElement("div",{className:i},r.createElement("img",{alt:a,src:e,height:n,width:l}))},p={sidebar_position:6,id:"compression",title:"Compression"},d=void 0,m={unversionedId:"clickhouse/compression",id:"clickhouse/compression",title:"Compression",description:"ClickHouse protocol supports data blocks compression with checksums.",source:"@site/docs/clickhouse/compression.mdx",sourceDirName:"clickhouse",slug:"/clickhouse/compression",permalink:"/docs/clickhouse/compression",draft:!1,editUrl:"https://github.com/go-faster/web/edit/main/docs/clickhouse/compression.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,id:"compression",title:"Compression"},sidebar:"tutorialSidebar",previous:{title:"Column types",permalink:"/docs/clickhouse/columns"},next:{title:"Slack channel",permalink:"/docs/slack"}},c={},u=[{value:"Modes",id:"modes",level:2},{value:"Block",id:"block",level:2},{value:"None mode",id:"none-mode",level:2}],k={toc:u};function g(t){let{components:e,...a}=t;return(0,l.kt)("wrapper",(0,n.Z)({},k,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"ClickHouse protocol supports ",(0,l.kt)("strong",{parentName:"p"},"data blocks")," compression with checksums.\nUse ",(0,l.kt)("inlineCode",{parentName:"p"},"LZ4")," if not sure what mode to pick."),(0,l.kt)("h2",{id:"modes"},"Modes"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"value"),(0,l.kt)("th",{parentName:"tr",align:null},"name"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"0x02")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#none-mode"},"None")),(0,l.kt)("td",{parentName:"tr",align:null},"No compression, only checksums")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"0x82")),(0,l.kt)("td",{parentName:"tr",align:null},"LZ4"),(0,l.kt)("td",{parentName:"tr",align:null},"Extremely fast, good compression")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"0x90")),(0,l.kt)("td",{parentName:"tr",align:null},"ZSTD"),(0,l.kt)("td",{parentName:"tr",align:null},"Zstandard, pretty fast, best compression")))),(0,l.kt)("p",null,"Both LZ4 and ZSTD are made by same author, but with different tradeoffs.\nFrom ",(0,l.kt)("a",{parentName:"p",href:"https://facebook.github.io/zstd/#benchmarks"},"facebook benchmarks"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"name"),(0,l.kt)("th",{parentName:"tr",align:null},"ratio"),(0,l.kt)("th",{parentName:"tr",align:null},"encoding"),(0,l.kt)("th",{parentName:"tr",align:null},"decoding"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"zstd")," 1.4.5 -1"),(0,l.kt)("td",{parentName:"tr",align:null},"2.8"),(0,l.kt)("td",{parentName:"tr",align:null},"500 MB/s"),(0,l.kt)("td",{parentName:"tr",align:null},"1660 MB/s")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"lz4")," 1.9.2"),(0,l.kt)("td",{parentName:"tr",align:null},"2.1"),(0,l.kt)("td",{parentName:"tr",align:null},"740 MB/s"),(0,l.kt)("td",{parentName:"tr",align:null},"4530 MB/s")))),(0,l.kt)("h2",{id:"block"},"Block"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"field"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"checksum"),(0,l.kt)("td",{parentName:"tr",align:null},"uint128"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/clickhouse/hash"},"Hash")," of (header + compressed data)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"raw_size"),(0,l.kt)("td",{parentName:"tr",align:null},"uint32"),(0,l.kt)("td",{parentName:"tr",align:null},"Raw size without header")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data_size"),(0,l.kt)("td",{parentName:"tr",align:null},"uint32"),(0,l.kt)("td",{parentName:"tr",align:null},"Uncompressed data size")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mode"),(0,l.kt)("td",{parentName:"tr",align:null},"byte"),(0,l.kt)("td",{parentName:"tr",align:null},"Compression mode")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"compressed_data"),(0,l.kt)("td",{parentName:"tr",align:null},"binary"),(0,l.kt)("td",{parentName:"tr",align:null},"Block of compressed data")))),(0,l.kt)(s,{src:(0,o.Z)("/img/diagrams/ch_compression_block.drawio.svg"),mdxType:"Diagram"}),(0,l.kt)("p",null,"Header is (raw_size + data_size + mode), raw size consists of len(header + compressed_data)."),(0,l.kt)("p",null,"Checksum is ",(0,l.kt)("inlineCode",{parentName:"p"},"hash(header + compressed_data)"),", using ",(0,l.kt)("a",{parentName:"p",href:"/docs/clickhouse/hash"},"ClickHouse CityHash"),"."),(0,l.kt)("h2",{id:"none-mode"},"None mode"),(0,l.kt)("p",null,"If ",(0,l.kt)("em",{parentName:"p"},"None")," mode is used, ",(0,l.kt)("inlineCode",{parentName:"p"},"compressed_data")," is equal to original data.\nNo compression mode is useful to ensure additional data integrity with checksums, because\nhashing overhead is negligible."))}g.isMDXComponent=!0}}]);